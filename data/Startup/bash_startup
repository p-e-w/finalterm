#!/bin/bash

# Include default startup file so that user's settings are respected
source ~/.bashrc



# Final Term's customizations start here


# NOTE: xterm properly ignores sequences of this type as unknown,
#       while some other terminals (such as GNOME Terminal) print them
function final_term_control_sequence() {
	control_sequence="\e]133;"
	for argument in "$@"; do
		control_sequence="$control_sequence$argument;"
	done
	# TODO: Remove last semicolon
	# this DOLLAR is required for the cmake configure_file
	# when using a $ it'd try to replace the control_sequence
	# with one of its own variables and thus remove it
	control_sequence="${DOLLAR}{control_sequence}\a"

	# TODO: Should "-ne" be added here?
	echo "$control_sequence"
}
export -f final_term_control_sequence

function send_control_sequence() {
	echo -ne "$1"
}
export -f send_control_sequence


# Logic for prompt and command detection

# Returns the command currently associated with the trap on the signal $1
function get_current_trap_command() {
	trap -p "$1" | grep -Po "(?<=').*(?=')"
}

# Sequence marking the start of the command prompt
FTCS_PROMPT_START="$(final_term_control_sequence 'A')"

# Sequence marking the start of the command
# read from the command prompt
FTCS_COMMAND_START="$(final_term_control_sequence 'B')"

# Sequence marking the end of the command
# read from the command prompt
FTCS_COMMAND_END="$(final_term_control_sequence 'C')"

# Note that it is safe to prepend a new command to the current one
# but not to append it, because bash does not allow a semicolon
# at the beginning of a command
# TODO: Substitute variable name with value in command (expansion?)
PROMPT_COMMAND='if [ -t 1 ]; then send_control_sequence "$FTCS_PROMPT_START"; fi; '$PROMPT_COMMAND

# TODO: Do not append control sequence if output is piped
PS1=$PS1$FTCS_COMMAND_START

trap "if [ -t 1 ]; then send_control_sequence \"$FTCS_COMMAND_END\"; fi; $(get_current_trap_command 'DEBUG')" DEBUG


# Termlet-related logic

function text_menu_start() {
	# NOTE: Nested double quotes look strange, but are both valid and necessary;
	#       see http://stackoverflow.com/questions/4031007
	echo "$(final_term_control_sequence 'D' "$1")"
}
export -f text_menu_start

function text_menu_end() {
	echo "$(final_term_control_sequence 'E' "$1")"
}
export -f text_menu_end

function send_progress() {
	send_control_sequence "$(final_term_control_sequence 'F' "$1" "$2")"
}
export -f send_progress

function run_termlet() {
	if [ -t 1 ]; then
		"@PKGDATADIR@/Termlets/$@"
	else
		"$@"
	fi
}

# Set up termlet aliases
pushd "@PKGDATADIR@/Termlets" > /dev/null
for filename in *; do
	alias $filename="run_termlet '$filename'"
done
popd > /dev/null

cd ~
